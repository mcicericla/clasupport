<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Ticket', 'doctrine');

/**
 * BaseTicket
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $descripcion
 * @property timestamp $fecha_alta
 * @property timestamp $fecha_actualizacion
 * @property timestamp $fecha_cierre
 * @property integer $usuario_id
 * @property integer $estado_ticket_id
 * @property integer $categoria_ticket_id
 * @property Usuario $Usuario
 * @property EstadoTicket $EstadoTicket
 * @property CategoriaTicket $CategoriaTicket
 * @property Doctrine_Collection $Nota
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getDescripcion()         Returns the current record's "descripcion" value
 * @method timestamp           getFechaAlta()           Returns the current record's "fecha_alta" value
 * @method timestamp           getFechaActualizacion()  Returns the current record's "fecha_actualizacion" value
 * @method timestamp           getFechaCierre()         Returns the current record's "fecha_cierre" value
 * @method integer             getUsuarioId()           Returns the current record's "usuario_id" value
 * @method integer             getEstadoTicketId()      Returns the current record's "estado_ticket_id" value
 * @method integer             getCategoriaTicketId()   Returns the current record's "categoria_ticket_id" value
 * @method Usuario             getUsuario()             Returns the current record's "Usuario" value
 * @method EstadoTicket        getEstadoTicket()        Returns the current record's "EstadoTicket" value
 * @method CategoriaTicket     getCategoriaTicket()     Returns the current record's "CategoriaTicket" value
 * @method Doctrine_Collection getNota()                Returns the current record's "Nota" collection
 * @method Ticket              setId()                  Sets the current record's "id" value
 * @method Ticket              setDescripcion()         Sets the current record's "descripcion" value
 * @method Ticket              setFechaAlta()           Sets the current record's "fecha_alta" value
 * @method Ticket              setFechaActualizacion()  Sets the current record's "fecha_actualizacion" value
 * @method Ticket              setFechaCierre()         Sets the current record's "fecha_cierre" value
 * @method Ticket              setUsuarioId()           Sets the current record's "usuario_id" value
 * @method Ticket              setEstadoTicketId()      Sets the current record's "estado_ticket_id" value
 * @method Ticket              setCategoriaTicketId()   Sets the current record's "categoria_ticket_id" value
 * @method Ticket              setUsuario()             Sets the current record's "Usuario" value
 * @method Ticket              setEstadoTicket()        Sets the current record's "EstadoTicket" value
 * @method Ticket              setCategoriaTicket()     Sets the current record's "CategoriaTicket" value
 * @method Ticket              setNota()                Sets the current record's "Nota" collection
 * 
 * @package    clasupport
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTicket extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ticket');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('descripcion', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('fecha_alta', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('fecha_actualizacion', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('fecha_cierre', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('usuario_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('estado_ticket_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('categoria_ticket_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Usuario', array(
             'local' => 'usuario_id',
             'foreign' => 'id'));

        $this->hasOne('EstadoTicket', array(
             'local' => 'estado_ticket_id',
             'foreign' => 'id'));

        $this->hasOne('CategoriaTicket', array(
             'local' => 'categoria_ticket_id',
             'foreign' => 'id'));

        $this->hasMany('Nota', array(
             'local' => 'id',
             'foreign' => 'ticket_id'));
    }
}